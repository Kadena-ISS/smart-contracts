
(load "../utils/init-key-const.repl")

(begin-tx)
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "validator-announce.pact")
(typecheck "NAMESPACE.validator-announce")
(commit-tx)
(print "\nLoaded ValidatorAnnounce")

;; declare data for test use
(begin-tx)
(module data1 GOVERNANCE
    (defcap GOVERNANCE () true)
    (defconst validator "0x6c414e7a15088023e28af44ad0e1d593671e4b15")
    (defconst storage "storagelocation1")
    (defconst signature "0x53ba1fb621a19fbae9589c9d3fab7414a4ad75c45ddb6ddaf2e493a8a8ecf0af27256ed4f38b7304e80f653b462a79dcc22bbc975d7ce6f077f1cefe3afedabc1c")
)
(module data2 GOVERNANCE
  (defcap GOVERNANCE () true)
  (defconst validator "0x6c414e7a15088023e28af44ad0e1d593671e4b16")
  (defconst storage "storagelocation2")
  (defconst signature "0x53ba1fb621a19fbae9589c9d3fab7414a4ad75c45ddb6ddaf2e493a8a8ecf0af27256ed4f38b7304e80f653b462a79dcc22bbc975d7ce6f077f1cefe3afedabc1c")
)
(commit-tx)

;; no announce
(begin-tx)
(namespace "NAMESPACE")
(expect "Announced validators fetched" [] (validator-announce.get-announced-validators))
(expect "Empty storage Locations fetched" [[]] (validator-announce.get-announced-storage-locations [data1.validator]))
(expect "Empty storage Location fetched" [] (validator-announce.get-announced-storage-location data1.validator))
(commit-tx)

;; announce ;; success 1
(begin-tx)
(namespace "NAMESPACE")
(expect "Validator Announcement is made" true (validator-announce.announce data1.validator data1.storage data1.signature))
(expect "Announced validators fetched" [data1.validator] (validator-announce.get-announced-validators))
(expect "Storage Locations fetched" [[data1.storage]] (validator-announce.get-announced-storage-locations [data1.validator]))
(expect "Storage Location fetched" [data1.storage] (validator-announce.get-announced-storage-location data1.validator))
(commit-tx)

;; announce ;; success 2
(begin-tx)
(namespace "NAMESPACE")
(expect "Validator Announcement is made" true (validator-announce.announce data2.validator data2.storage data2.signature))
(expect "Announced validators fetched" [data1.validator data2.validator] (validator-announce.get-announced-validators))
(expect "Storage Locations fetched" [[data1.storage] [data2.storage]] (validator-announce.get-announced-storage-locations [data1.validator data2.validator]))
(expect "Storage Location fetched" [data2.storage] (validator-announce.get-announced-storage-location data2.validator))
(commit-tx)

;; announce ;; fail known hash
(begin-tx)
(namespace "NAMESPACE")
(expect-failure "Replay attack not possible" (validator-announce.announce data1.validator data1.storage data1.signature))
(expect-failure "Replay attack not possible" (validator-announce.announce data2.validator data2.storage data2.signature))
(commit-tx)
